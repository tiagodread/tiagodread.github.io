[{"content":" This post is part of a serie of posts about the Basecamp\u0026rsquo;s Shape Up methodology. In this post, we will talk about what Shape Up is and present an overview of the process. In the next post, we will focus on how each step works in practice. If you are a developer, product manager, or part of a technology team, this series is for you!\nIntroduction In general, Shape Up is a framework created by Basecamp that seeks to solve the common challenges faced by product development teams, especially those caused by growing pains. Learn more about the origins and objectives of Shape Up on the official Basecamp website.\nThis methodology helps teams to better organize themselves by modeling problems in advance, allowing them to build and deliver solutions within a fixed period of time (6 weeks). This results in greater efficiency and value generation for the business. Ideal for smaller companies, Shape Up balances the need for structured processes with adaptability. It minimizes excessive scopes and ensures that teams focus on high-priority tasks.\nGlossary of important terms: Pitch: A problem that needs to be solved; it is the unit of work in Shape Up. Triad: Composed of a Product Manager, a Tech Lead, and a Designer; responsible for refining the Pitches. Dev team: Development team that executes the work. Appetite: Estimated time to solve a Pitch; usually 6 weeks. Rabbit Hole: Problems that arise during the execution of a Pitch and are out of scope. Cool Down: 2-week rest period between 6-week cycles. Why Shape Up? Balance between autonomy and responsibility\nTeams have the freedom to execute, but within clear and objective parameters.\nFocus on value delivery Teams prioritize what really matters to the business.\nRisk reduction Prior refinement minimizes uncertainties during execution.\nControlled scope The Pitch delimits the work to be done, avoiding excessive scopes.\nThe Process In Shape Up, every problem is refined in advance by the triad (PM+TL+PD) before entering development. The process is divided into two main groups:\nOut of Cycle (Upstream)\nWithin the Cycle (Downstream)\nOut of Cycle Shape The Shaping is a refinement process carried out by the triad (PM+TL+PD) over 6 weeks. During this stage, the triad explores the problem deeply, consults experts when necessary, and documents all the context (e.g.: framing, metrics, flows, prototypes). The goal is to model the problem so that the development team can work autonomously on the solution.\nIf the refinement is well done, the execution will be more efficient. This creates a positive cycle of autonomy for both parties (virtuous cycle).\nThe reverse is also true, you already understand the logic, right?\nIt is important to note that the amount of context in a Pitch can vary for various reasons: complexity of the subject (business), technical complexity, and team maturity.\n‚ÑπÔ∏è The shaping stage occurs in parallel with the BUILD cycle.\nBetting Table After Shaping, stakeholders gather at the \u0026ldquo;betting table\u0026rdquo; to decide which Pitches will be prioritized. During this meeting, the triad presents each Pitch, explaining the problem, the proposed solution, the appetite, and the rabbit holes. Stakeholders then decide which Pitches will enter the next BUILD cycle.\n‚ÑπÔ∏è This step occurs after the 6 weeks of SHAPE.\nWithin the Cycle Build The Build is the 6-week cycle where the development team builds, tests, and delivers the solution to the problem. During this period, the focus is exclusively on delivery within the defined appetite. New problems discovered during execution are documented for treatment in future SHAPE cycles.\n‚ÑπÔ∏è BUILD occurs in parallel with the SHAPE cycle.\nCool Down After the BUILD cycle, there is a 2-week rest period called Cool Down. During this time, the team should:\nReflect on the previous cycle. Solve minor problems, such as technical debts. Review documentation and prepare for the next cycle. The Cool Down period is essential for the team to recharge and prepare for the next cycle.\nIn the next post, we will delve into each step of the Shape Up methodology, explaining how it works in practice. Stay tuned üöÄ\n","permalink":"https://tiagodread.github.io/en/posts/the-shape-up-methodology-by-basecamp/","summary":"\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis post is part of a serie of posts about the Basecamp\u0026rsquo;s Shape Up methodology. In this post, we will talk about what Shape Up is and present an overview of the process.\nIn the next post, we will focus on how each step works in practice. If you are a developer, product manager, or part of a technology team, this series is for you!\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn general, \u003cem\u003eShape Up\u003c/em\u003e is a framework created by Basecamp that seeks to solve the common challenges faced by product development teams, especially those caused by growing pains. \u003ca href=\"https://basecamp.com/shapeup/0.3-chapter-01#growing-pains\"\u003eLearn more about the origins and objectives of Shape Up on the official Basecamp website\u003c/a\u003e.\u003c/p\u003e","title":"The Shape Up Methodology by Basecamp"},{"content":"Introduction Writing about the role of QA in software development teams is crucial to understanding the evolution of the area and the importance of moving away from the old perception that QA is limited to only ‚Äútesting software‚Äù. This article aims to clarify the differences between the roles of Tester, QA (Quality Assurance) and QE (Quality Engineer) and challenges faced by a QA professional within a development team.\nDifferences between Tester, QA and QE Tester is the more traditional and general used term and is more directly associated with performing manual tests. This function focuses on identifying bugs or defects in software, often operating at the end of the development cycle. The tester checks the product\u0026rsquo;s compliance with the established requirements, but his performance is generally reactive ‚Äî he acts after the product or functionality has already been developed.\nQuality Assurance (QA) is the process through which the product is subjected during the software development phase, when this process is clear and predictable, it allows the specified minimum quality expectations to be met. The term QA is also generally used in the job market to refer to professionals who work with software quality in teams. Calling a quality professional a quality assurance gives the impression that he is solely responsible for the quality of the product in general, and he is not!\n‚ÄúQA‚Äù (profession) expands the scope of action compared to a tester, focusing on the dissemination of good practices and ensuring that the development process is attended to by everyone from the beginning of the development cycle. More than finding defects, QA is involved in the planning, design, implementation and maintenance of processes that ensure product quality. This includes defining acceptance criteria, developing test cases and scenarios, risk mapping, development, automated testing, etc. The goal is to prevent defects to produce high-quality software.\nCool Tiago and Thamyres, if ‚ÄúQA‚Äù is not a profession, what should a professional who works with quality be called? Firstly, the professional needs to understand how software is designed, so that it is possible to define quality standards, understanding software engineering is a fundamental requirement for this, I am not saying that he needs to have completed a bachelor degree in the area, but yes, understand various aspects that will serve as a basis for your actions. Therefore, if a quality professional needs to know about software engineering, why not call him Software Quality Engineer, or Software Quality Engineer? As well, other areas have evolved over the years, Backend Engineer and Frontend Engineer, for example. When referring to a quality professional as ‚ÄúQuality Engineer‚Äù, it reinforces the idea to the market that this professional is also a software engineer, therefore, able to contribute to ‚Äúmore technical‚Äù activities such as defining testable architecture, code review, test automation at different layers, quick wins bug resolution, CI/CD, in addition to in-depth analysis of complex quality issues.\nConclusion With that, I hope it has become a little clearer about the differences between Tester, QA (quality assurance process), QA (market profession) and QE (software engineer who works with a focus on quality). It is worth mentioning that this is a reading that we do based on our perception and experience in the area over the years in several different companies and teams, mentoring software quality professionals in different seniority and contexts. Other professionals who are references in software quality in the market also share this vision, such as Elias Nogueira on the podcast Quality Assurance (QA) vs Quality Engineer (QE) and Og Maciel in Quality Engineering (QE)\nBy: Tiago G√≥es and Thamyres Moraes\n","permalink":"https://tiagodread.github.io/en/posts/qa-no-quality-engineer/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWriting about the role of QA in software development teams is crucial to understanding the evolution of the area and the importance of moving away from the old perception that QA is limited to only ‚Äútesting software‚Äù. This article aims to clarify the differences between the roles of Tester, QA (Quality Assurance) and QE (Quality Engineer) and challenges faced by a QA professional within a development team.\u003c/p\u003e\n\u003ch2 id=\"differences-between-tester-qa-and-qe\"\u003eDifferences between Tester, QA and QE\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eTester\u003c/strong\u003e is the more traditional and general used term and is more directly associated with performing manual tests. This function focuses on identifying bugs or defects in software, often operating at the end of the development cycle. The tester checks the product\u0026rsquo;s compliance with the established requirements, but his performance is generally reactive ‚Äî he acts after the product or functionality has already been developed.\u003c/p\u003e","title":"QA? No. Quality Engineer!"},{"content":"Much is said about diversity and inclusion nowdays; this is not a subject to be considered \u0026ldquo;a plus\u0026rdquo; within companies and in society in general, but rather essential for us as individuals to grow as human beings.\nWith all the discussion on the labor market about the importance of the theme, I came to draw attention to the hiring process of companies. So, how can we think of diversity and pluralism if the \u0026ldquo;doors are closed\u0026rdquo; even in the hiring process? In other words, the process itself is not inclusive.\nHow can we design a hiring process that is not auto-exclusive, which means without any bias and impartiality about gender, race, political, psychological, or mental conditions, respecting people\u0026rsquo;s indiduality?\nCurrently, much is said about diversity in companies and in the job market, but are we prepared to interview people without any of these biases?\nQuestions like: Do you consider yourself a fast learner? We need a person \u0026ldquo;like this or that\u0026hellip;\u0026rdquo; They are automatically exclusive to people with ADHD or any other similar limitation, for example.\nThere is a very fine line between visibly being \u0026ldquo;normal\u0026rdquo;. People like Linus Torvalds, for example, had no physical or mental limitations (as far as I know); however, he had an introverted personality and an aversion to formalities, but that did not stop him from creating and maintaining the kernel of Linux, one of the most important operating systems in the world to this day. Would he pass half of the recruitment and selection processes at companies today if he weren\u0026rsquo;t this well-known personality?\nI bring this reflection here because I recently started to structure the process of recruiting and selecting QEs at the company that I\u0026rsquo;m working for, and I realized that this does not only apply to QEs but to any type of hiring, as I could see when I reflected a lot on the subject.\nAnd you? What have you been doing to make the recruitment and selection process more inclusive in the context in which you are today? Finally, is it possible to achieve diversity within companies without stopping and reflecting on these and many other points?\n","permalink":"https://tiagodread.github.io/en/posts/on-the-fallacy-of-diversity-and-plurality/","summary":"\u003cp\u003eMuch is said about diversity and inclusion nowdays; this is not a subject to be considered \u0026ldquo;a plus\u0026rdquo; within companies and in society in general, but rather essential for us as individuals to grow as human beings.\u003c/p\u003e\n\u003cp\u003eWith all the discussion on the labor market about the importance of the theme, I came to draw attention to the hiring process of companies. So, how can we think of diversity and pluralism if the \u0026ldquo;doors are closed\u0026rdquo; even in the hiring process? In other words, the process itself is \u003cstrong\u003enot inclusive\u003c/strong\u003e.\u003c/p\u003e","title":"On the fallacy of diversity and plurality of thought in the labor market"},{"content":"Hey! I couldn\u0026rsquo;t start posting about agile methodologies, software development and qualit, testing and related topics from my day to day before introducing myself.\nI\u0026rsquo;m Tiago G√≥es, or just \u0026ldquo;G√≥es\u0026rdquo;, Brazilian, Software Quality Engineer since 2018, before that, I worked as Software Requirements Analyst for two years, completed IT technican course (2011-2013) and degree Analisis and Software Development in 2016, Certified Tester, Agile Testing Fellow. I like practicing sports (I did Taekwondo from 9 to 19) biking, gym, learn new technologies, aaaaand ship code to production aiming high quality bar and customer satisfaction.\nI decided to start this blog to give a little bit back to community compared to what I\u0026rsquo;ve learned from it so far. I always wanted to do it before (and I don\u0026rsquo;t know why I didn\u0026rsquo;t start), anyways, this blog will be a mix of content, tutorials, tips, life hacks and anything else I feel comfortable sharing.\nI hope you enjoy it. üòÄ\n","permalink":"https://tiagodread.github.io/en/about/","summary":"\u003cp\u003eHey!\nI couldn\u0026rsquo;t start posting about agile methodologies, software development and qualit, testing and related topics from my day to day before introducing myself.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m Tiago G√≥es, or just \u0026ldquo;G√≥es\u0026rdquo;, Brazilian, Software Quality Engineer since 2018, before that, I worked as Software Requirements Analyst for two years, completed IT technican course (2011-2013) and degree Analisis and Software Development in 2016, Certified Tester, Agile Testing Fellow. I like practicing sports (I did Taekwondo from 9 to 19) biking, gym, learn new technologies, aaaaand ship code to production aiming high quality bar and customer satisfaction.\u003c/p\u003e","title":"About"}]