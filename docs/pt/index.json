[{"content":"Em projetos de software, principalmente os que levam mais tempo com uma complexidade maior em regras de neg√≥cios e/ou altera√ß√µes, √© comum que seja necess√°rio um plano de teste melhor estruturado para dar visibilidade sobre o escopo das mudan√ßas, regras de neg√≥cio e o que ser√° testado. Em muitos casos, uma pessoa no time √© respons√°vel por executar todos os cen√°rios, documentar os bugs, por√©m, essa √© uma √≥tima oportunidade para o QA promover colabora√ß√£o entre os membros do time, promovendo a colabora√ß√£o e troca de conhecimento sobre uma determinada funcionalidade, al√©m de fortalecer a cultura de qualidade do time e o sentimento de que \u0026ldquo;Qualidade √© responsabilidade de todos‚Äú.\nO que √© Bug Bash? O Bug Bash √© uma estrat√©gia colaborativa de testes que visa aproveitar os diferentes perfis de usu√°rio de todos os integrantes da equipe envolvida com o desenvolvimento do produto, independente de fun√ß√£o ou cargo, para testarem, em um curto espa√ßo de tempo pr√©-estabelecido, uma determinada funcionalidade ou nova vers√£o do software.\nCom a participa√ß√£o de pessoas com diversas habilidades √© poss√≠vel reunir uma abund√¢ncia de pontos de aten√ß√£o em curto espa√ßo de tempo, al√©m de permitir que as pessoas se familiarizem com a nova vers√£o do produto/funcionalidade que tanto aguardam.\nPara promover um Bug bash, muita organiza√ß√£o √© necess√°ria para que o objetivo seja alcan√ßado com sucesso no per√≠odo estabelecido.\nOrganizando um Bug Bash Defina um objetivo claro para o evento, por exemplo, testar a funcionalidade, usabilidade, responsividade, navegabilidade, etc ou modelo do bug bash, se ser√° baseado em um checklist de cen√°rios/casos de testes ou aberto para que os participantes possam explorar e testar livremente o que bem entender!\nMarque um momento com os participantes no qual todos possam realmente estar ali, colaborando, trocando informa√ß√µes e interagindo de modo que todos possam participar, mostre para o time a import√¢ncia desse tipo de evento e n√£o esque√ßa de agendar mais tempo na agenda para caber uma abertura para explicar como o evento ir√° acontecer e o encerramento para que seja poss√≠vel coletar os resultados do bug bash;\nCaso o evento seja guiado por um checklist de cen√°rios/casos de testes, tente priorizar os casos que possuem mais risco para o neg√≥cio, de modo que seja fact√≠vel executar todos os casos dentro do tempo limite;\nComo o tempo ser√° curto, prepare tudo de antem√£o: ambiente no qual ser√° testado, n√∫mero da vers√£o, contas para teste, o que est√° ou n√£o em escopo, cen√°rios de teste, como reportar os problemas no Jira (t√≠tulo claro, descri√ß√£o, cen√°rio esperado, cen√°rio observado e evid√™ncias), uma planilha para auxiliar na organiza√ß√£o;\nExecutando um Bug Bash Chegado o grande dia, fa√ßa uma apresenta√ß√£o curta de abertura para os participantes, explicando cada um dos pontos explicados, objetivos, tempo, regras e informa√ß√µes adicionais;\nMostre-se dispon√≠vel para tirar qualquer tipo de d√∫vida dos participantes sobre a funcionalidade, cen√°rios de testes, regra de neg√≥cio. Ent√£o esteja ciente de que talvez n√£o sobre muito tempo para voc√™ colocar a m√£o na massa (mas claro, tudo depende do n√≠vel de maturidade/familiaridade do time com o assunto), com o tempo, √© comum que os conceitos e a informa√ß√£o de ‚Äúcomo testar‚Äù fique cada vez mais obvia;\n√â importante que os participantes testem dentro das regras estabelecidas (seguindo um checklist ou de forma explorat√≥ria);\n√â comum que participante com pouco contexto (novos integrantes no time), se sinta um pouco acuado, interaja trazendo-(o/a) para o contexto e ambiente de troca;\nIncentive as pessoas para compartilharem suas telas e esclarecer suas d√∫vidas de forma clara, promovendo aprendizagem;\nCaso surja mais de uma discuss√£o/d√∫vida simultaneamente, abra uma segunda chamada tempor√°ria no teams, de modo que seja poss√≠vel expandir o assunto e retorne para a chamada principal quando terminar, trazendo um resumo do que foi discutido. N√£o esque√ßa de documentar!\nFinalizando o tempo limite, fa√ßa uma cerim√¥nia de encerramento colhendo feedbacks dos participantes e agradecendo sua participa√ß√£o, caso seja poss√≠vel, mostre os resultados pr√©vios obtidos: quantos casos de testes foram verificados, quantos bugs foram abertos, quantos feedbacks de melhorias foi reportado pelo time, etc.\nSe n√£o der tempo de executar, todos os casos n√£o t√™m problema, tente testar o m√°ximo que conseguir dentro do per√≠odo definido;\nPor √∫ltimo, mas n√£o menos importante (B√¥nus): Pense em maneiras de gamificar o bug bash, gerando premia√ß√£o para o participante que reportou mais problemas ou o problema mais cr√≠tico para o neg√≥cio, use a imagina√ß√£o e promova engajamento;\nComunicando os resultados Escolha como reportar√° os resultados: via e-mail, PDF, apresenta√ß√£o para o time, independente do formato, n√£o demore nessa etapa!\nEm alguns casos ser√° necess√°rio consultar a pessoa que reportou determinado bug para coletar mais informa√ß√µes;\nApareceram novos cen√°rios/casos de testes? √ìtimo‚Ä¶ n√£o esque√ßa de enriquecer a planilha de cen√°rios para uma pr√≥xima itera√ß√£o;\nConte com a ajuda de stakeholders para endere√ßar os problemas como PM, TL, Design, visando uma prioriza√ß√£o clara sobre o que √© impeditivo para o release e o que pode ser postergado;\nCompartilhe e colete feedbacks com os participantes para melhorar o processo na pr√≥xima itera√ß√£o e manter o time engajado;\nHappy testing! üêûüéâ\n","permalink":"https://tiagodread.github.io/pt/posts/bug-bash/","summary":"\u003cp\u003eEm projetos de software, principalmente os que levam mais tempo com uma complexidade maior em regras de neg√≥cios e/ou altera√ß√µes, √© comum que seja necess√°rio um plano de teste melhor estruturado para dar visibilidade sobre o escopo das mudan√ßas, regras de neg√≥cio e o que ser√° testado. Em muitos casos, uma pessoa no time √© respons√°vel por executar todos os cen√°rios, documentar os bugs, por√©m, essa √© uma √≥tima oportunidade para o QA promover colabora√ß√£o entre os membros do time, promovendo a colabora√ß√£o e troca de conhecimento sobre uma determinada funcionalidade, al√©m de fortalecer a cultura de qualidade do time e o sentimento de que \u0026ldquo;Qualidade √© responsabilidade de todos‚Äú.\u003c/p\u003e","title":"Bug Bash"},{"content":" Esse post faz parte de uma s√©rie de posts sobre a metodologia Shape Up da Basecamp. Nesse post, vamos falar sobre o que √© Shape Up e apresentar um panorama geral do processo. No pr√≥ximo post, vamos focar em como cada etapa funciona na pr√°tica. Se voc√™ √© desenvolvedor, gerente de produto ou parte de um time de tecnologia, essa s√©rie √© para voc√™!\nIntrodu√ß√£o De forma geral, Shape Up √© um framework criado pela Basecamp que busca resolver os desafios comuns enfrentados por times de desenvolvimento de produto, especialmente aqueles causados pelas dores do crescimento. Saiba mais sobre as origens e objetivos do Shape Up no site oficial da Basecamp.\nEssa metodologia ajuda equipes a se organizarem melhor ao modelar problemas com anteced√™ncia, permitindo construir e entregar solu√ß√µes dentro de um per√≠odo fixo de tempo (6 semanas). Isso resulta em maior efici√™ncia e gera√ß√£o de valor para o neg√≥cio. Ideal para empresas menores, o Shape Up equilibra a necessidade de processos estruturados com a flexibilidade de adapta√ß√£o. Ele minimiza escopos excessivos e garante que as equipes se concentrem em tarefas de alta prioridade.\nGloss√°rio de termos importantes: Pitch: Um problema que precisa ser resolvido; √© a unidade de trabalho no Shape Up. Tr√≠ade: Composta por um Product Manager, um Tech Lead e um Designer; respons√°vel por refinar os Pitches. Time dev: Equipe de desenvolvimento que executa o trabalho. Apetite: Tempo estimado para resolver um Pitch; geralmente 6 semanas. Rabbit Hole: Problemas que surgem durante a execu√ß√£o de um Pitch e est√£o fora do escopo. Cool Down: Per√≠odo de 2 semanas de descanso entre os ciclos de 6 semanas. Por que Shape Up? Balan√ßo entre autonomia e responsabilidade\nTimes t√™m liberdade para executar, mas dentro de par√¢metros claros e objetivos.\nFoco na entrega de valor\nAs equipes priorizam o que realmente importa para o neg√≥cio.\nRedu√ß√£o de riscos\nRefinamento pr√©vio minimiza incertezas durante a execu√ß√£o.\nEscopo controlado\nO Pitch delimita o trabalho a ser feito, evitando escopos excessivos.\nProcesso No Shape Up, todo problema √© refinado previamente pela tr√≠ade (PM+TL+PD) antes de entrar em desenvolvimento. O processo √© dividido em dois grandes grupos:\nFora do Ciclo (Upstream)\nDentro do Ciclo (Downstream)\nFora do Ciclo Shape O Shaping √© um processo de refinamento realizado pela tr√≠ade (PM+TL+PD) durante 6 semanas. Durante essa etapa, a tr√≠ade explora o problema profundamente, consulta especialistas quando necess√°rio e documenta todo o contexto (ex.: framing, m√©tricas, fluxos, prot√≥tipos). O objetivo √© modelar o problema de forma que o time de desenvolvimento possa trabalhar com autonomia na solu√ß√£o.\nSe o refinamento for bem feito, a execu√ß√£o ser√° mais eficiente. Isso cria um ciclo positivo de autonomia para ambas as partes (ciclo visioso).\nO inverso tamb√©m √© verdadeiro, voc√™ j√° entendeu a l√≥gica n√©?\nVale ressaltar que a quantidade de contexto em um Pitch pode variar por diversos motivos: complexidade do assunto (neg√≥cio), complexidade t√©cnica e maturidade do time.\n‚ÑπÔ∏è A etapa de shaping ocorre em paralelo ao ciclo de BUILD.\nBetting Table Ap√≥s o Shaping, os stakeholders se re√∫nem na \u0026ldquo;mesa de apostas\u0026rdquo; para decidir quais Pitches ser√£o priorizados. Durante essa reuni√£o, a tr√≠ade apresenta cada Pitch, explicando o problema, a solu√ß√£o proposta, o apetite e os rabbit holes. Os stakeholders, ent√£o, decidem quais Pitches entrar√£o no pr√≥ximo ciclo de BUILD.\n‚ÑπÔ∏è Essa etapa ocorre ap√≥s as 6 semanas de SHAPE.\nDentro do Ciclo Build O Build √© o ciclo de 6 semanas onde o time de desenvolvimento constr√≥i, testa e entrega a solu√ß√£o para o problema. Durante esse per√≠odo, o foco √© exclusivamente na entrega dentro do apetite definido. Novos problemas descobertos durante a execu√ß√£o s√£o documentados para tratamento em futuros ciclos de SHAPE.\n‚ÑπÔ∏è BUILD ocorre em paralelo com o ciclo de SHAPE.\nCool Down Ap√≥s o ciclo de 6 semanas de Build, ocorre uma pausa de 2 semanas conhecida como Cool Down. Esse momento √© dedicado a:\nRefletir sobre o ciclo anterior. Resolver problemas menores, como d√≠vidas t√©cnicas. Revisar documenta√ß√£o e preparar-se para o pr√≥ximo ciclo. Essa pausa √© fundamental para manter a sa√∫de do time e melhorar processos.\nAt√© o pr√≥ximo post! üöÄ \u0026ldquo;No pr√≥ximo, vamos explorar as etapas de SHAPE e BUILD em maior profundidade.\u0026rdquo;\n","permalink":"https://tiagodread.github.io/pt/posts/the-shape-up-methodology-by-basecamp/","summary":"\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEsse post faz parte de uma s√©rie de posts sobre a metodologia Shape Up da Basecamp. Nesse post, vamos falar sobre o que √© Shape Up e apresentar um panorama geral do processo. No pr√≥ximo post, vamos focar em como cada etapa funciona na pr√°tica. Se voc√™ √© desenvolvedor, gerente de produto ou parte de um time de tecnologia, essa s√©rie √© para voc√™!\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"introdu√ß√£o\"\u003eIntrodu√ß√£o\u003c/h2\u003e\n\u003cp\u003eDe forma geral, \u003cem\u003eShape Up\u003c/em\u003e √© um framework criado pela Basecamp que busca resolver os desafios comuns enfrentados por times de desenvolvimento de produto, especialmente aqueles causados pelas dores do crescimento. \u003ca href=\"https://basecamp.com/shapeup/0.3-chapter-01#growing-pains\"\u003eSaiba mais sobre as origens e objetivos do Shape Up no site oficial da Basecamp\u003c/a\u003e.\u003c/p\u003e","title":"A metodologia Shape Up da Basecamp"},{"content":"Introdu√ß√£o Escrever sobre o papel do QA nos times de desenvolvimento de software √© crucial para entender a evolu√ß√£o da √°rea e a import√¢ncia de se distanciar da antiga percep√ß√£o de que o QA se limita a ‚Äútestar software‚Äù. Este artigo visa esclarecer as diferen√ßas entre os pap√©is de Tester, QA (Quality Assurance) e QE (Quality Engineer) e os desafios enfrentados por um profissional de QA dentro de um time de desenvolvimento.\nDiferen√ßas entre Tester, QA e QE Tester √© o termo mais tradicional e est√° mais diretamente associado √† execu√ß√£o de testes manuais. Essa fun√ß√£o se concentra na identifica√ß√£o de bugs ou defeitos em um software, operando muitas vezes ao final do ciclo de desenvolvimento. O tester verifica a conformidade do produto com os requisitos estabelecidos, mas sua atua√ß√£o √© geralmente reativa ‚Äî ele atua depois que o produto ou funcionalidade j√° foi desenvolvido.\nQuality Assurance (QA) √© o processo pelo qual o produto √© submetido durante a fase de desenvolvimento de software, quando este processo √© claro e previs√≠vel, permite que as expectativas m√≠nimas de qualidade especificadas sejam atendidas O termo QA tamb√©m √© geralmente utilizado no mercado de trabalho para referir-se √† profissionais que atuam com qualidade de software em times. Chamar um profissional de qualidade por ‚Äúgarantidor da qualidade‚Äù passa a impress√£o de que ele √© o √∫nico respons√°vel pela qualidade do produto no geral, e n√£o √©!\nO ‚ÄúQA‚Äù (profiss√£o) amplia o escopo de atua√ß√£o em compara√ß√£o com um tester, focando na dissemina√ß√£o de boas pr√°ticas e garantindo que o processo de desenvolvimento seja atendido por todos desde o in√≠cio do ciclo de desenvolvimento. Mais do que encontrar defeitos, o QA est√° envolvido no planejamento, design, implementa√ß√£o e manuten√ß√£o de processos que asseguram a qualidade do produto. Isso inclui a defini√ß√£o de crit√©rios de aceita√ß√£o, elabora√ß√£o de casos e cen√°rios de teste, mapeamento de riscos, desenvolvimento, testes automatizados, etc. O objetivo √© prevenir defeitos para produzir um software de alta qualidade.\nBeleza Tiago e Thamyres, se ‚ÄúQA‚Äù n√£o √© profiss√£o, como o profissional que trabalha com qualidade deveria ser chamado? Em primeiro lugar, o profissional precisa compreender como um software √© concebido, de modo que seja poss√≠vel definir padr√µes de qualidade, entender sobre engenharia de software √© um requisito fundamental para isso, n√£o estou dizendo que ele precisa ter forma√ß√£o na √°rea, mas sim, compreender diversos aspectos no qual servir√° de base para sua atua√ß√£o. Portanto, se um profissional de qualidade precisa conhecer sobre engenharia de software, porque n√£o o cham√°-lo como Engenheiro de Qualidade de Software, ou Software Quality Engineer? Assim como, outras √°reas evolu√≠ram ao longo dos anos, Backend Engineer e Frontend Engineer, por exemplo. Ao referir-se a um profissional de qualidade como ‚ÄúQuality Engineer‚Äù refor√ßa a ideia para o mercado de que esse profissional tamb√©m √© um engenheiro de software, portanto, consegue contribuir com atividades ‚Äúmais t√©cnicas‚Äù como defini√ß√£o de arquitetura test√°vel, revis√£o de c√≥digo, automa√ß√£o de testes em diferentes camadas, resolu√ß√£o de bugs quick wins, CI/CD, al√©m da an√°lise profunda de problemas complexos de qualidade.\nConclus√£o Com isso, espero que tenha ficado um pouco mais claro sobre as diferen√ßas entre Tester, QA (processo de garantia de qualidade), QA (profiss√£o para o mercado) e QE (engenheiro de software que atua com foco em qualidade). Vale ressaltar que essa √© uma leitura que fazemos com base na nossa percep√ß√£o e experi√™ncia na √°rea ao longo dos anos em diversas empresas e times diferentes, mentoreando profissionais de qualidade de software em diferentes senioridades e contextos. Outros profissionais refer√™ncia em qualidade de software no mercado, tamb√©m compartilham dessa vis√£o, como Elias Nogueira no podcast Quality Assurance (QA) vs Quality Engineer (QE) e Og Maciel em Engenharia de Qualidade (QE)\nPor: Tiago G√≥es e Thamyres Moraes\n","permalink":"https://tiagodread.github.io/pt/posts/qa-no-quality-engineer/","summary":"\u003ch2 id=\"introdu√ß√£o\"\u003eIntrodu√ß√£o\u003c/h2\u003e\n\u003cp\u003eEscrever sobre o papel do QA nos times de desenvolvimento de software √© crucial para entender a evolu√ß√£o da √°rea e a import√¢ncia de se distanciar da antiga percep√ß√£o de que o QA se limita a ‚Äútestar software‚Äù. Este artigo visa esclarecer as diferen√ßas entre os pap√©is de Tester, QA (Quality Assurance) e QE (Quality Engineer) e os desafios enfrentados por um profissional de QA dentro de um time de desenvolvimento.\u003c/p\u003e","title":"QA? N√£o. Engenheiros de Qualidade!"},{"content":"Muito se fala sobre diversidade, pluralismo de pensamento dentro das empresas e na sociedade no geral e n√£o √© novidade que isso n√£o √© algo ‚Äúa mais‚Äù, e sim, essencial para n√≥s como indiv√≠duos crescermos e evoluirmos como seres humanos.\nCom tanta fal√°cia dentro do mercado de trabalho acerca da import√¢ncia sobre o tema, venho chamar aten√ß√£o sobre o processo de entrevistas das empresas no geral, como pensar em diversidade e pluralismo se as portas est√£o fechadas logo no processo de contrata√ß√£o?\nComo podemos estruturar um processo de contrata√ß√£o de candidatos que n√£o seja automaticamente exclusivo, isto √©, n√£o inclusivo, sem vi√©s de qualquer natureza e imparcial como, g√™nero, ra√ßa, op√ß√£o pol√≠tica, op√ß√£o sexual ou condi√ß√µes f√≠sicas e mentais respeitando a individualidade das pessoas?\nAtualmente, muito se defende sobre diversidade nas empresas e no mercado de trabalho, mas ser√° que estamos preparados para entrevistar pessoas sem algum desses vieses?\nPerguntas do tipo: voc√™ se considera uma pessoa que aprende r√°pido? Precisamos de uma pessoa ‚Äúassim‚Äù ou ‚Äúassado‚Äù‚Ä¶ S√£o automaticamente exclusivas para pessoas com TDAH ou qualquer outra limita√ß√£o semelhante, por exemplo.\nExiste uma linha muito t√™nue entre visivelmente ser ‚Äúalgu√©m especial‚Äù ou ser ‚Äúnormal‚Äù. Pessoas como Linus Torvalds, por exemplo, n√£o possu√≠am limita√ß√µes f√≠sicas ou mentais (at√© aonde eu sei n√£o), no entanto, possu√≠a uma personalidade introvertida e avers√£o a formalidades, mas isso n√£o o impediu de criar e manter o kernel de um dos sistemas operacionais mais importantes do mundo at√© os dias de hoje, ser√° que ele passaria na metade dos processos de recrutamento e sele√ß√£o das empresas hoje se ele n√£o fosse essa personalidade conhecida?\nTrago essa reflex√£o aqui, pois recentemente, comecei a estruturar o processo de recrutamento e sele√ß√£o de QEs e percebi que isso n√£o se aplica s√≥ √† QEs, mas qualquer tipo de contrata√ß√£o como pude observar ao refletir muito sobre o tema.\nE voc√™? O que tem feito para que o processo de recrutamento e sele√ß√£o seja mais inclusivo no contexto em que voc√™ est√° inserido? Por fim, √© poss√≠vel alcan√ßar a diversidade dentro das empresas sem parar e refletir sobre esses alguns desses, e muitos outros, pontos?\n","permalink":"https://tiagodread.github.io/pt/posts/on-the-fallacy-of-diversity-and-plurality/","summary":"\u003cp\u003eMuito se fala sobre diversidade, pluralismo de pensamento dentro das empresas e na sociedade no geral e n√£o √© novidade que isso n√£o √© algo ‚Äúa mais‚Äù, e sim, essencial para n√≥s como indiv√≠duos crescermos e evoluirmos como seres humanos.\u003c/p\u003e\n\u003cp\u003eCom tanta fal√°cia dentro do mercado de trabalho acerca da import√¢ncia sobre o tema, venho chamar aten√ß√£o sobre o processo de entrevistas das empresas no geral, como pensar em diversidade e pluralismo se as portas est√£o fechadas logo no processo de contrata√ß√£o?\u003c/p\u003e","title":"Sobre a fal√°cia da diversidade e pluralidade de pensamento no mercado de trabalho"},{"content":"Ea√≠! Eu n√£o poderia come√ßar a postar sobre metodologias √°geis, desenvolvimento de software, qualidade em geral, testes e assuntos relacionados ao meu dia a dia antes de me apresentar.\nSou Tiago G√≥es, ou apenas \u0026ldquo;G√≥es\u0026rdquo;, brasileiro, Engenheiro de Qualidade de Software desde 2018, antes disso, trabalhei como Analista de Requisitos de Software por dois anos, conclui o curso t√©cnico de TI (2011-2013) e gradua√ß√£o An√°lise e Desenvolvimento de Software em 2016, Certified Tester, Agile Testing Fellow. Gosto de praticar esportes (pratiquei Taekwondo dos 9 aos 19) bike e academia, aprender novas tecnologias, eeeee entrega de c√≥digo para produ√ß√£o visando alta qualidade e satisfa√ß√£o do cliente.\nDecidi come√ßar este blog para retribuir um pouco √† comunidade em compara√ß√£o com o que aprendi at√© agora. Sempre quis fazer isso antes (e n√£o sei por que n√£o comecei), de qualquer forma, este blog ser√° uma mistura de conte√∫do, tutoriais, dicas, life hacks e qualquer outra coisa que eu me sinta confort√°vel em compartilhar.\nEspero que voc√™ goste. üòÄ\n","permalink":"https://tiagodread.github.io/pt/sobre/","summary":"\u003cp\u003eEa√≠!\nEu n√£o poderia come√ßar a postar sobre metodologias √°geis, desenvolvimento de software, qualidade em geral, testes e assuntos relacionados ao meu dia a dia antes de me apresentar.\u003c/p\u003e\n\u003cp\u003eSou Tiago G√≥es, ou apenas \u0026ldquo;G√≥es\u0026rdquo;, brasileiro, Engenheiro de Qualidade de Software desde 2018, antes disso, trabalhei como Analista de Requisitos de Software por dois anos, conclui o curso t√©cnico de TI (2011-2013) e gradua√ß√£o An√°lise e Desenvolvimento de Software em 2016, Certified Tester, Agile Testing Fellow. Gosto de praticar esportes (pratiquei Taekwondo dos 9 aos 19) bike e academia, aprender novas tecnologias, eeeee entrega de c√≥digo para produ√ß√£o visando alta qualidade e satisfa√ß√£o do cliente.\u003c/p\u003e","title":"Sobre"}]